# pip install prettytable
import socket
import os
import ipaddress
import subprocess
from concurrent.futures import ThreadPoolExecutor
from prettytable import PrettyTable
import time

def timer(func):
    def wrapper(*args, **kwargs):
        start_time = time.time()  # –∑–∞–ø–∏—Å—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —á–∞—Å
        result = func(*args, **kwargs)
        end_time = time.time()  # –∑–∞–ø–∏—Å—É—î–º–æ —á–∞—Å –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
        print(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó {func.__name__}: {end_time - start_time:.4f} —Å–µ–∫—É–Ω–¥")
        return result
    return wrapper

def get_default_gateway():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ IP-–∞–¥—Ä–µ—Å—É —à–ª—é–∑—É (—Ä–æ—É—Ç–µ—Ä–∞)"""
    if os.name == "nt":
        result = subprocess.run(["ipconfig"], capture_output=True, text=True)
        for line in result.stdout.split("\n"):
            if "Default Gateway" in line:
                return line.split(":")[-1].strip()
    else:
        import netifaces
        gws = netifaces.gateways()
        return gws['default'][netifaces.AF_INET][0]

def ping_device(ip):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –ø—ñ–Ω–≥"""
    param = "-n" if os.name == "nt" else "-c"
    try:
        result = subprocess.run(["ping", param, "1", "-w", "500", ip], stdout=subprocess.DEVNULL)
        return result.returncode == 0  # 0 –æ–∑–Ω–∞—á–∞—î, —â–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
    except Exception:
        return False

def is_port_open(ip, port=80, timeout=1):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –ø–æ—Ä—Ç"""
    try:
        with socket.create_connection((ip, port), timeout=timeout):
            return True
    except (socket.timeout, ConnectionRefusedError):
        return False

def get_device_name(ip):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º'—è –ø—Ä–∏—Å—Ç—Ä–æ—é (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ) —á–µ—Ä–µ–∑ DNS"""
    try:
        hostname, _, _ = socket.gethostbyaddr(ip)
        return hostname
    except (socket.herror, socket.gaierror):
        return None  # –Ø–∫—â–æ —ñ–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

def get_mac_address(ip):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ MAC-–∞–¥—Ä–µ—Å—É –ø—Ä–∏—Å—Ç—Ä–æ—é —á–µ—Ä–µ–∑ ARP"""
    try:
        if os.name == "nt":
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ arp –¥–ª—è Windows
            result = subprocess.run(["arp", "-a", ip], capture_output=True, text=True)
            for line in result.stdout.split("\n"):
                if ip in line:
                    return line.split()[3]
        else:
            # –î–ª—è Linux –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–º–∞–Ω–¥—É arp-scan (–ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
            result = subprocess.run(["arp-scan", ip], capture_output=True, text=True)
            for line in result.stdout.split("\n"):
                if ip in line:
                    return line.split()[1]
    except Exception as e:
        pass
    return None

def scan_ip(ip):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ IP: —Å–ø–æ—á–∞—Ç–∫—É –ø—ñ–Ω–≥, –ø–æ—Ç—ñ–º –ø–æ—Ä—Ç"""
    device_replied = ping_device(ip)  # –ü—ñ–Ω–≥—É—î–º–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π

    if not device_replied:
        return None, False, None, None  # –ü—Ä–∏—Å—Ç—Ä—ñ–π –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î

    port_open = is_port_open(ip, 80)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ä—Ç 80
    device_name = get_device_name(ip)  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –ø—Ä–∏—Å—Ç—Ä–æ—é —á–µ—Ä–µ–∑ DNS
    mac_address = get_mac_address(ip)  # –û—Ç—Ä–∏–º—É—î–º–æ MAC-–∞–¥—Ä–µ—Å—É
    return ip, device_replied and port_open, device_name, mac_address

@timer
def scan_network():
    """–°–∫–∞–Ω—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó –≤ –º–µ—Ä–µ–∂—ñ (–±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ)"""
    router_ip = get_default_gateway()
    if not router_ip:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —à–ª—é–∑")
        return

    network = ipaddress.ip_network(router_ip + "/24", strict=False)
    open_ports = []
    replied_devices = []

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ
    table = PrettyTable()
    table.field_names = ["IP –ê–¥—Ä–µ—Å–∞", "–ù–∞–∑–≤–∞ –ø—Ä–∏—Å—Ç—Ä–æ—é", "MAC –ê–¥—Ä–µ—Å–∞", "–í—ñ–¥–∫—Ä–∏—Ç–∏–π –ø–æ—Ä—Ç 80"]

    with ThreadPoolExecutor(max_workers=50) as executor:
        results = executor.map(scan_ip, (str(ip) for ip in network.hosts()))

    # –ó–±–∏—Ä–∞—î–º–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –ø–æ—Ä—Ç–æ–º 80 —Ç–∞ —Ç—ñ, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø—ñ–Ω–≥
    for ip, is_open, device_name, mac_address in results:
        if ip:
            if is_open:
                table.add_row([ip, device_name if device_name else "–ù–µ–≤—ñ–¥–æ–º–æ", mac_address if mac_address else "–ù–µ–≤—ñ–¥–æ–º–æ", f"http://{ip}"])
                open_ports.append(ip)
            else:
                table.add_row([ip, device_name if device_name else "–ù–µ–≤—ñ–¥–æ–º–æ", mac_address if mac_address else "–ù–µ–≤—ñ–¥–æ–º–æ", "-"])
                replied_devices.append(ip)

    print(table)  # –í–∏–≤–µ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –≤ –∫–æ–Ω—Å–æ–ª—å

    print(f"\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(open_ports)} –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –ø–æ—Ä—Ç–æ–º 80")
    print(f"üîπ –ó–∞–≥–∞–ª–æ–º –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø—ñ–Ω–≥: {len(replied_devices)}")


print('–ü–æ—à—É–∫ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –º–µ—Ä–µ–∂—ñ')
scan_network()
